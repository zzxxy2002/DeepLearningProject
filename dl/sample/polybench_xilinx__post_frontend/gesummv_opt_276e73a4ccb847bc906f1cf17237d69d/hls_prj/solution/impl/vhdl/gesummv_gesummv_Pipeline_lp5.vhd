-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gesummv_gesummv_Pipeline_lp5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buff_y_out_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buff_y_out_1_ce0 : OUT STD_LOGIC;
    buff_y_out_1_we0 : OUT STD_LOGIC;
    buff_y_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buff_y_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buff_y_out_ce0 : OUT STD_LOGIC;
    buff_y_out_we0 : OUT STD_LOGIC;
    buff_y_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp1_ce0 : OUT STD_LOGIC;
    tmp1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp1_1_ce0 : OUT STD_LOGIC;
    tmp1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp2_ce0 : OUT STD_LOGIC;
    tmp2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp2_1_ce0 : OUT STD_LOGIC;
    tmp2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1838_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1838_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1838_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1838_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1838_p_ce : OUT STD_LOGIC );
end;


architecture behav of gesummv_gesummv_Pipeline_lp5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln37_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln37_fu_146_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln37_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln37_reg_200_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln37_reg_200_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln37_reg_200_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln37_reg_200_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln37_reg_200_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_y_out_addr_reg_226 : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_addr_reg_226_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_addr_reg_226_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_addr_reg_226_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_addr_reg_226_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_addr_reg_226_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_1_addr_reg_231 : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_1_addr_reg_231_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_1_addr_reg_231_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_1_addr_reg_231_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_1_addr_reg_231_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal buff_y_out_1_addr_reg_231_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln38_fu_175_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_1_fu_182_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_1_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_reg_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln6_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_42 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln37_fu_140_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln6_4_fu_150_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gesummv_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gesummv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gesummv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    i_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln37_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_42 <= add_ln37_fu_140_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_42 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add1_reg_246 <= grp_fu_1838_p_dout0;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                buff_y_out_1_addr_reg_231_pp0_iter2_reg <= buff_y_out_1_addr_reg_231_pp0_iter1_reg;
                buff_y_out_1_addr_reg_231_pp0_iter3_reg <= buff_y_out_1_addr_reg_231_pp0_iter2_reg;
                buff_y_out_1_addr_reg_231_pp0_iter4_reg <= buff_y_out_1_addr_reg_231_pp0_iter3_reg;
                buff_y_out_1_addr_reg_231_pp0_iter5_reg <= buff_y_out_1_addr_reg_231_pp0_iter4_reg;
                buff_y_out_addr_reg_226_pp0_iter2_reg <= buff_y_out_addr_reg_226_pp0_iter1_reg;
                buff_y_out_addr_reg_226_pp0_iter3_reg <= buff_y_out_addr_reg_226_pp0_iter2_reg;
                buff_y_out_addr_reg_226_pp0_iter4_reg <= buff_y_out_addr_reg_226_pp0_iter3_reg;
                buff_y_out_addr_reg_226_pp0_iter5_reg <= buff_y_out_addr_reg_226_pp0_iter4_reg;
                trunc_ln37_reg_200_pp0_iter2_reg <= trunc_ln37_reg_200_pp0_iter1_reg;
                trunc_ln37_reg_200_pp0_iter3_reg <= trunc_ln37_reg_200_pp0_iter2_reg;
                trunc_ln37_reg_200_pp0_iter4_reg <= trunc_ln37_reg_200_pp0_iter3_reg;
                trunc_ln37_reg_200_pp0_iter5_reg <= trunc_ln37_reg_200_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                buff_y_out_1_addr_reg_231 <= zext_ln6_fu_160_p1(5 - 1 downto 0);
                buff_y_out_1_addr_reg_231_pp0_iter1_reg <= buff_y_out_1_addr_reg_231;
                buff_y_out_addr_reg_226 <= zext_ln6_fu_160_p1(5 - 1 downto 0);
                buff_y_out_addr_reg_226_pp0_iter1_reg <= buff_y_out_addr_reg_226;
                select_ln38_1_reg_241 <= select_ln38_1_fu_182_p3;
                select_ln38_reg_236 <= select_ln38_fu_175_p3;
                trunc_ln37_reg_200 <= trunc_ln37_fu_146_p1;
                trunc_ln37_reg_200_pp0_iter1_reg <= trunc_ln37_reg_200;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln37_fu_140_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln37_fu_134_p2)
    begin
        if (((icmp_ln37_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_42, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_42;
        end if; 
    end process;

    buff_y_out_1_address0 <= buff_y_out_1_addr_reg_231_pp0_iter5_reg;

    buff_y_out_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            buff_y_out_1_ce0 <= ap_const_logic_1;
        else 
            buff_y_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_y_out_1_d0 <= add1_reg_246;

    buff_y_out_1_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, trunc_ln37_reg_200_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln37_reg_200_pp0_iter5_reg = ap_const_lv1_1))) then 
            buff_y_out_1_we0 <= ap_const_logic_1;
        else 
            buff_y_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_y_out_address0 <= buff_y_out_addr_reg_226_pp0_iter5_reg;

    buff_y_out_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            buff_y_out_ce0 <= ap_const_logic_1;
        else 
            buff_y_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_y_out_d0 <= add1_reg_246;

    buff_y_out_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, trunc_ln37_reg_200_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (trunc_ln37_reg_200_pp0_iter5_reg = ap_const_lv1_0))) then 
            buff_y_out_we0 <= ap_const_logic_1;
        else 
            buff_y_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1838_p_ce <= ap_const_logic_1;
    grp_fu_1838_p_din0 <= select_ln38_reg_236;
    grp_fu_1838_p_din1 <= select_ln38_1_reg_241;
    grp_fu_1838_p_opcode <= ap_const_lv2_0;
    icmp_ln37_fu_134_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv7_40) else "0";
    lshr_ln6_4_fu_150_p4 <= ap_sig_allocacmp_i_2(5 downto 1);
    select_ln38_1_fu_182_p3 <= 
        tmp2_1_q0 when (trunc_ln37_reg_200(0) = '1') else 
        tmp2_q0;
    select_ln38_fu_175_p3 <= 
        tmp1_1_q0 when (trunc_ln37_reg_200(0) = '1') else 
        tmp1_q0;
    tmp1_1_address0 <= zext_ln6_fu_160_p1(5 - 1 downto 0);

    tmp1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp1_1_ce0 <= ap_const_logic_1;
        else 
            tmp1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_address0 <= zext_ln6_fu_160_p1(5 - 1 downto 0);

    tmp1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp1_ce0 <= ap_const_logic_1;
        else 
            tmp1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_1_address0 <= zext_ln6_fu_160_p1(5 - 1 downto 0);

    tmp2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp2_1_ce0 <= ap_const_logic_1;
        else 
            tmp2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_address0 <= zext_ln6_fu_160_p1(5 - 1 downto 0);

    tmp2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp2_ce0 <= ap_const_logic_1;
        else 
            tmp2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln37_fu_146_p1 <= ap_sig_allocacmp_i_2(1 - 1 downto 0);
    zext_ln6_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln6_4_fu_150_p4),64));
end behav;
