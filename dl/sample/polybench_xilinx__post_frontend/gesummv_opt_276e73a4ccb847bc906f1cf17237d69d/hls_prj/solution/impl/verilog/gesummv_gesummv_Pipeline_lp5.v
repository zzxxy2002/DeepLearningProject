// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gesummv_gesummv_Pipeline_lp5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buff_y_out_1_address0,
        buff_y_out_1_ce0,
        buff_y_out_1_we0,
        buff_y_out_1_d0,
        buff_y_out_address0,
        buff_y_out_ce0,
        buff_y_out_we0,
        buff_y_out_d0,
        tmp1_address0,
        tmp1_ce0,
        tmp1_q0,
        tmp1_1_address0,
        tmp1_1_ce0,
        tmp1_1_q0,
        tmp2_address0,
        tmp2_ce0,
        tmp2_q0,
        tmp2_1_address0,
        tmp2_1_ce0,
        tmp2_1_q0,
        grp_fu_1838_p_din0,
        grp_fu_1838_p_din1,
        grp_fu_1838_p_opcode,
        grp_fu_1838_p_dout0,
        grp_fu_1838_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] buff_y_out_1_address0;
output   buff_y_out_1_ce0;
output   buff_y_out_1_we0;
output  [31:0] buff_y_out_1_d0;
output  [4:0] buff_y_out_address0;
output   buff_y_out_ce0;
output   buff_y_out_we0;
output  [31:0] buff_y_out_d0;
output  [4:0] tmp1_address0;
output   tmp1_ce0;
input  [31:0] tmp1_q0;
output  [4:0] tmp1_1_address0;
output   tmp1_1_ce0;
input  [31:0] tmp1_1_q0;
output  [4:0] tmp2_address0;
output   tmp2_ce0;
input  [31:0] tmp2_q0;
output  [4:0] tmp2_1_address0;
output   tmp2_1_ce0;
input  [31:0] tmp2_1_q0;
output  [31:0] grp_fu_1838_p_din0;
output  [31:0] grp_fu_1838_p_din1;
output  [1:0] grp_fu_1838_p_opcode;
input  [31:0] grp_fu_1838_p_dout0;
output   grp_fu_1838_p_ce;

reg ap_idle;
reg buff_y_out_1_ce0;
reg buff_y_out_1_we0;
reg buff_y_out_ce0;
reg buff_y_out_we0;
reg tmp1_ce0;
reg tmp1_1_ce0;
reg tmp2_ce0;
reg tmp2_1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln37_fu_134_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln37_fu_146_p1;
reg   [0:0] trunc_ln37_reg_200;
reg   [0:0] trunc_ln37_reg_200_pp0_iter1_reg;
reg   [0:0] trunc_ln37_reg_200_pp0_iter2_reg;
reg   [0:0] trunc_ln37_reg_200_pp0_iter3_reg;
reg   [0:0] trunc_ln37_reg_200_pp0_iter4_reg;
reg   [0:0] trunc_ln37_reg_200_pp0_iter5_reg;
reg   [4:0] buff_y_out_addr_reg_226;
reg   [4:0] buff_y_out_addr_reg_226_pp0_iter1_reg;
reg   [4:0] buff_y_out_addr_reg_226_pp0_iter2_reg;
reg   [4:0] buff_y_out_addr_reg_226_pp0_iter3_reg;
reg   [4:0] buff_y_out_addr_reg_226_pp0_iter4_reg;
reg   [4:0] buff_y_out_addr_reg_226_pp0_iter5_reg;
reg   [4:0] buff_y_out_1_addr_reg_231;
reg   [4:0] buff_y_out_1_addr_reg_231_pp0_iter1_reg;
reg   [4:0] buff_y_out_1_addr_reg_231_pp0_iter2_reg;
reg   [4:0] buff_y_out_1_addr_reg_231_pp0_iter3_reg;
reg   [4:0] buff_y_out_1_addr_reg_231_pp0_iter4_reg;
reg   [4:0] buff_y_out_1_addr_reg_231_pp0_iter5_reg;
wire   [31:0] select_ln38_fu_175_p3;
reg   [31:0] select_ln38_reg_236;
wire   [31:0] select_ln38_1_fu_182_p3;
reg   [31:0] select_ln38_1_reg_241;
reg   [31:0] add1_reg_246;
wire   [63:0] zext_ln6_fu_160_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] i_fu_42;
wire   [6:0] add_ln37_fu_140_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_2;
wire   [4:0] lshr_ln6_4_fu_150_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 i_fu_42 = 7'd0;
#0 ap_done_reg = 1'b0;
end

gesummv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln37_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_42 <= add_ln37_fu_140_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add1_reg_246 <= grp_fu_1838_p_dout0;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        buff_y_out_1_addr_reg_231_pp0_iter2_reg <= buff_y_out_1_addr_reg_231_pp0_iter1_reg;
        buff_y_out_1_addr_reg_231_pp0_iter3_reg <= buff_y_out_1_addr_reg_231_pp0_iter2_reg;
        buff_y_out_1_addr_reg_231_pp0_iter4_reg <= buff_y_out_1_addr_reg_231_pp0_iter3_reg;
        buff_y_out_1_addr_reg_231_pp0_iter5_reg <= buff_y_out_1_addr_reg_231_pp0_iter4_reg;
        buff_y_out_addr_reg_226_pp0_iter2_reg <= buff_y_out_addr_reg_226_pp0_iter1_reg;
        buff_y_out_addr_reg_226_pp0_iter3_reg <= buff_y_out_addr_reg_226_pp0_iter2_reg;
        buff_y_out_addr_reg_226_pp0_iter4_reg <= buff_y_out_addr_reg_226_pp0_iter3_reg;
        buff_y_out_addr_reg_226_pp0_iter5_reg <= buff_y_out_addr_reg_226_pp0_iter4_reg;
        trunc_ln37_reg_200_pp0_iter2_reg <= trunc_ln37_reg_200_pp0_iter1_reg;
        trunc_ln37_reg_200_pp0_iter3_reg <= trunc_ln37_reg_200_pp0_iter2_reg;
        trunc_ln37_reg_200_pp0_iter4_reg <= trunc_ln37_reg_200_pp0_iter3_reg;
        trunc_ln37_reg_200_pp0_iter5_reg <= trunc_ln37_reg_200_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        buff_y_out_1_addr_reg_231 <= zext_ln6_fu_160_p1;
        buff_y_out_1_addr_reg_231_pp0_iter1_reg <= buff_y_out_1_addr_reg_231;
        buff_y_out_addr_reg_226 <= zext_ln6_fu_160_p1;
        buff_y_out_addr_reg_226_pp0_iter1_reg <= buff_y_out_addr_reg_226;
        select_ln38_1_reg_241 <= select_ln38_1_fu_182_p3;
        select_ln38_reg_236 <= select_ln38_fu_175_p3;
        trunc_ln37_reg_200 <= trunc_ln37_fu_146_p1;
        trunc_ln37_reg_200_pp0_iter1_reg <= trunc_ln37_reg_200;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_134_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        buff_y_out_1_ce0 = 1'b1;
    end else begin
        buff_y_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln37_reg_200_pp0_iter5_reg == 1'd1))) begin
        buff_y_out_1_we0 = 1'b1;
    end else begin
        buff_y_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        buff_y_out_ce0 = 1'b1;
    end else begin
        buff_y_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (trunc_ln37_reg_200_pp0_iter5_reg == 1'd0))) begin
        buff_y_out_we0 = 1'b1;
    end else begin
        buff_y_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp1_1_ce0 = 1'b1;
    end else begin
        tmp1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp1_ce0 = 1'b1;
    end else begin
        tmp1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp2_1_ce0 = 1'b1;
    end else begin
        tmp2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp2_ce0 = 1'b1;
    end else begin
        tmp2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_fu_140_p2 = (ap_sig_allocacmp_i_2 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buff_y_out_1_address0 = buff_y_out_1_addr_reg_231_pp0_iter5_reg;

assign buff_y_out_1_d0 = add1_reg_246;

assign buff_y_out_address0 = buff_y_out_addr_reg_226_pp0_iter5_reg;

assign buff_y_out_d0 = add1_reg_246;

assign grp_fu_1838_p_ce = 1'b1;

assign grp_fu_1838_p_din0 = select_ln38_reg_236;

assign grp_fu_1838_p_din1 = select_ln38_1_reg_241;

assign grp_fu_1838_p_opcode = 2'd0;

assign icmp_ln37_fu_134_p2 = ((ap_sig_allocacmp_i_2 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln6_4_fu_150_p4 = {{ap_sig_allocacmp_i_2[5:1]}};

assign select_ln38_1_fu_182_p3 = ((trunc_ln37_reg_200[0:0] == 1'b1) ? tmp2_1_q0 : tmp2_q0);

assign select_ln38_fu_175_p3 = ((trunc_ln37_reg_200[0:0] == 1'b1) ? tmp1_1_q0 : tmp1_q0);

assign tmp1_1_address0 = zext_ln6_fu_160_p1;

assign tmp1_address0 = zext_ln6_fu_160_p1;

assign tmp2_1_address0 = zext_ln6_fu_160_p1;

assign tmp2_address0 = zext_ln6_fu_160_p1;

assign trunc_ln37_fu_146_p1 = ap_sig_allocacmp_i_2[0:0];

assign zext_ln6_fu_160_p1 = lshr_ln6_4_fu_150_p4;

endmodule //gesummv_gesummv_Pipeline_lp5
