-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k3mm_k3mm_Pipeline_lp1_lp2_lp3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buff_A_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_A_ce0 : OUT STD_LOGIC;
    buff_A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_A_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_A_ce1 : OUT STD_LOGIC;
    buff_A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_A_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_A_1_ce0 : OUT STD_LOGIC;
    buff_A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_A_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_A_1_ce1 : OUT STD_LOGIC;
    buff_A_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_B_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_B_ce0 : OUT STD_LOGIC;
    buff_B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_B_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_B_ce1 : OUT STD_LOGIC;
    buff_B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_B_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_B_1_ce0 : OUT STD_LOGIC;
    buff_B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_B_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_B_1_ce1 : OUT STD_LOGIC;
    buff_B_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_ce0 : OUT STD_LOGIC;
    tmp1_we0 : OUT STD_LOGIC;
    tmp1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3084_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3084_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3084_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_3084_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3084_p_ce : OUT STD_LOGIC;
    grp_fu_3088_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3088_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3088_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3088_p_ce : OUT STD_LOGIC );
end;


architecture behav of k3mm_k3mm_Pipeline_lp1_lp2_lp3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal icmp_ln32_reg_609 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage6 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal first_iter_1_reg_207 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_609_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_2_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_2_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_2_fu_375_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln10_2_reg_617 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_addr_reg_622 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_addr_reg_622_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal arrayidx6911_promoted_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal buff_A_load_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_B_load_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_A_1_load_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_B_1_load_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_A_load_1_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_B_load_1_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_A_1_load_1_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_B_1_load_1_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal mul_1_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal mul_3_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal tmp_1_reg_737 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_mux_first_iter_1_phi_fu_211_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal p_cast_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_70 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln34_fu_544_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_74 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal select_ln33_fu_383_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten7_fu_78 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal select_ln33_1_fu_508_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_82 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal select_ln32_fu_339_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten21_fu_86 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln32_1_fu_270_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_fu_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_223_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal icmp_ln33_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_285_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln10_fu_297_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln10_1_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_1_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_1_fu_311_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln33_fu_351_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln33_fu_347_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_391_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln33_cast_fu_403_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_72_fu_407_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln10_4_fu_418_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_64_fu_428_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_65_fu_442_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln33_cast1_fu_399_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_fu_450_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln35_fu_462_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_fu_468_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_fu_482_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_1_fu_490_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln33_1_fu_502_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage6_00001 : BOOLEAN;
    signal ap_block_pp0_stage10_00001 : BOOLEAN;
    signal ap_block_pp0_stage14_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_condition_691 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component k3mm_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k3mm_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k3mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component k3mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage6,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage6)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                if ((ap_const_boolean_1 = ap_condition_691)) then 
                    empty_fu_90 <= arrayidx6911_promoted_reg_667;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln32_reg_609_pp0_iter1_reg = ap_const_lv1_0))) then 
                    empty_fu_90 <= grp_fu_3084_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    first_iter_1_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                first_iter_1_reg_207 <= ap_const_lv1_1;
            elsif (((icmp_ln32_reg_609 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                first_iter_1_reg_207 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_82 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln32_fu_264_p2 = ap_const_lv1_0))) then 
                i_fu_82 <= select_ln32_fu_339_p3;
            end if; 
        end if;
    end process;

    indvar_flatten21_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten21_fu_86 <= ap_const_lv17_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln32_fu_264_p2 = ap_const_lv1_0))) then 
                indvar_flatten21_fu_86 <= add_ln32_1_fu_270_p2;
            end if; 
        end if;
    end process;

    indvar_flatten7_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten7_fu_78 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln32_fu_264_p2 = ap_const_lv1_0))) then 
                indvar_flatten7_fu_78 <= select_ln33_1_fu_508_p3;
            end if; 
        end if;
    end process;

    j_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_74 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln32_fu_264_p2 = ap_const_lv1_0))) then 
                j_fu_74 <= select_ln33_fu_383_p3;
            end if; 
        end if;
    end process;

    k_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_70 <= ap_const_lv7_0;
                elsif (((icmp_ln32_reg_609 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_70 <= add_ln34_fu_544_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                arrayidx6911_promoted_reg_667 <= tmp1_q0;
                buff_A_1_load_1_reg_702 <= buff_A_1_q0;
                buff_A_1_load_reg_682 <= buff_A_1_q1;
                buff_A_load_1_reg_692 <= buff_A_q0;
                buff_A_load_reg_672 <= buff_A_q1;
                buff_B_1_load_1_reg_707 <= buff_B_1_q0;
                buff_B_1_load_reg_687 <= buff_B_1_q1;
                buff_B_load_1_reg_697 <= buff_B_q0;
                buff_B_load_reg_677 <= buff_B_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln32_reg_609 <= icmp_ln32_fu_264_p2;
                icmp_ln32_reg_609_pp0_iter1_reg <= icmp_ln32_reg_609;
                or_ln10_2_reg_613 <= or_ln10_2_fu_369_p2;
                select_ln10_2_reg_617 <= select_ln10_2_fu_375_p3;
                tmp1_addr_reg_622 <= p_cast_fu_413_p1(12 - 1 downto 0);
                tmp1_addr_reg_622_pp0_iter1_reg <= tmp1_addr_reg_622;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                mul_1_reg_722 <= grp_fu_3088_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                mul_2_reg_727 <= grp_fu_3088_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                mul_3_reg_732 <= grp_fu_3088_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                mul_reg_712 <= grp_fu_3088_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then
                reg_227 <= grp_fu_3084_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_reg_737 <= add_ln34_fu_544_p2(6 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage6_subdone, ap_condition_exit_pp0_iter0_stage6, ap_block_pp0_stage15_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage6)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln32_1_fu_270_p2 <= std_logic_vector(unsigned(indvar_flatten21_fu_86) + unsigned(ap_const_lv17_1));
    add_ln32_fu_285_p2 <= std_logic_vector(unsigned(i_fu_82) + unsigned(ap_const_lv7_1));
    add_ln33_1_fu_502_p2 <= std_logic_vector(unsigned(indvar_flatten7_fu_78) + unsigned(ap_const_lv12_1));
    add_ln33_fu_351_p2 <= std_logic_vector(unsigned(select_ln10_fu_297_p3) + unsigned(ap_const_lv7_1));
    add_ln34_fu_544_p2 <= std_logic_vector(unsigned(select_ln10_2_reg_617) + unsigned(ap_const_lv7_4));
    add_ln35_1_fu_490_p2 <= std_logic_vector(unsigned(tmp_67_fu_482_p3) + unsigned(select_ln33_cast1_fu_399_p1));
    add_ln35_fu_450_p2 <= std_logic_vector(unsigned(tmp_65_fu_442_p3) + unsigned(select_ln33_cast1_fu_399_p1));
    and_ln10_fu_363_p2 <= (xor_ln10_1_fu_357_p2 and tmp_fu_319_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_691_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln32_reg_609, or_ln10_2_reg_613)
    begin
                ap_condition_691 <= ((icmp_ln32_reg_609 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (or_ln10_2_reg_613 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone, icmp_ln32_reg_609)
    begin
        if (((icmp_ln32_reg_609 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            ap_condition_exit_pp0_iter0_stage6 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage6;

    ap_phi_mux_first_iter_1_phi_fu_211_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln32_reg_609, first_iter_1_reg_207, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln32_reg_609 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_first_iter_1_phi_fu_211_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_1_phi_fu_211_p4 <= first_iter_1_reg_207;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_1_address0 <= zext_ln35_2_fu_476_p1(11 - 1 downto 0);
    buff_A_1_address1 <= zext_ln35_fu_436_p1(11 - 1 downto 0);

    buff_A_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buff_A_1_ce0 <= ap_const_logic_1;
        else 
            buff_A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_A_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buff_A_1_ce1 <= ap_const_logic_1;
        else 
            buff_A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_address0 <= zext_ln35_2_fu_476_p1(11 - 1 downto 0);
    buff_A_address1 <= zext_ln35_fu_436_p1(11 - 1 downto 0);

    buff_A_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buff_A_ce0 <= ap_const_logic_1;
        else 
            buff_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_A_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buff_A_ce1 <= ap_const_logic_1;
        else 
            buff_A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_B_1_address0 <= zext_ln35_3_fu_496_p1(11 - 1 downto 0);
    buff_B_1_address1 <= zext_ln35_1_fu_456_p1(11 - 1 downto 0);

    buff_B_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buff_B_1_ce0 <= ap_const_logic_1;
        else 
            buff_B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_B_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buff_B_1_ce1 <= ap_const_logic_1;
        else 
            buff_B_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_B_address0 <= zext_ln35_3_fu_496_p1(11 - 1 downto 0);
    buff_B_address1 <= zext_ln35_1_fu_456_p1(11 - 1 downto 0);

    buff_B_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buff_B_ce0 <= ap_const_logic_1;
        else 
            buff_B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_B_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buff_B_ce1 <= ap_const_logic_1;
        else 
            buff_B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_72_fu_407_p2 <= std_logic_vector(unsigned(tmp_s_fu_391_p3) + unsigned(select_ln33_cast_fu_403_p1));

    grp_fu_219_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, reg_227, ap_CS_fsm_pp0_stage2, empty_fu_90, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_219_p0 <= reg_227;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_219_p0 <= empty_fu_90;
        else 
            grp_fu_219_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_219_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage2, mul_reg_712, mul_1_reg_722, mul_2_reg_727, mul_3_reg_732, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_219_p1 <= mul_3_reg_732;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_219_p1 <= mul_2_reg_727;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_219_p1 <= mul_1_reg_722;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_219_p1 <= mul_reg_712;
        else 
            grp_fu_219_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_223_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, buff_A_load_reg_672, buff_A_1_load_reg_682, buff_A_load_1_reg_692, buff_A_1_load_1_reg_702, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_223_p0 <= buff_A_1_load_1_reg_702;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_223_p0 <= buff_A_load_1_reg_692;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_223_p0 <= buff_A_1_load_reg_682;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_223_p0 <= buff_A_load_reg_672;
            else 
                grp_fu_223_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_223_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_223_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, buff_B_load_reg_677, buff_B_1_load_reg_687, buff_B_load_1_reg_697, buff_B_1_load_1_reg_707, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_223_p1 <= buff_B_1_load_1_reg_707;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_223_p1 <= buff_B_load_1_reg_697;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_223_p1 <= buff_B_1_load_reg_687;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_223_p1 <= buff_B_load_reg_677;
            else 
                grp_fu_223_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_223_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_3084_p_ce <= ap_const_logic_1;
    grp_fu_3084_p_din0 <= grp_fu_219_p0;
    grp_fu_3084_p_din1 <= grp_fu_219_p1;
    grp_fu_3084_p_opcode <= ap_const_lv2_0;
    grp_fu_3088_p_ce <= ap_const_logic_1;
    grp_fu_3088_p_din0 <= grp_fu_223_p0;
    grp_fu_3088_p_din1 <= grp_fu_223_p1;
    icmp_ln32_fu_264_p2 <= "1" when (indvar_flatten21_fu_86 = ap_const_lv17_10000) else "0";
    icmp_ln33_fu_291_p2 <= "1" when (indvar_flatten7_fu_78 = ap_const_lv12_400) else "0";
    lshr_ln10_4_fu_418_p4 <= select_ln10_2_fu_375_p3(5 downto 1);
    or_ln10_1_fu_333_p2 <= (xor_ln34_fu_327_p2 or icmp_ln33_fu_291_p2);
    or_ln10_2_fu_369_p2 <= (or_ln10_fu_305_p2 or and_ln10_fu_363_p2);
    or_ln10_fu_305_p2 <= (icmp_ln33_fu_291_p2 or ap_phi_mux_first_iter_1_phi_fu_211_p4);
    or_ln35_fu_462_p2 <= (lshr_ln10_4_fu_418_p4 or ap_const_lv5_1);
    p_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_72_fu_407_p2),64));
    select_ln10_1_fu_311_p3 <= 
        ap_const_lv7_0 when (icmp_ln33_fu_291_p2(0) = '1') else 
        k_fu_70;
    select_ln10_2_fu_375_p3 <= 
        select_ln10_1_fu_311_p3 when (or_ln10_1_fu_333_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln10_fu_297_p3 <= 
        ap_const_lv7_0 when (icmp_ln33_fu_291_p2(0) = '1') else 
        j_fu_74;
    select_ln32_fu_339_p3 <= 
        add_ln32_fu_285_p2 when (icmp_ln33_fu_291_p2(0) = '1') else 
        i_fu_82;
    select_ln33_1_fu_508_p3 <= 
        ap_const_lv12_1 when (icmp_ln33_fu_291_p2(0) = '1') else 
        add_ln33_1_fu_502_p2;
    select_ln33_cast1_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_fu_383_p3),11));
    select_ln33_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_fu_383_p3),12));
    select_ln33_fu_383_p3 <= 
        select_ln10_fu_297_p3 when (or_ln10_1_fu_333_p2(0) = '1') else 
        add_ln33_fu_351_p2;

    tmp1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, tmp1_addr_reg_622_pp0_iter1_reg, ap_block_pp0_stage1, p_cast_fu_413_p1, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            tmp1_address0 <= tmp1_addr_reg_622_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            tmp1_address0 <= p_cast_fu_413_p1(12 - 1 downto 0);
        else 
            tmp1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    tmp1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            tmp1_ce0 <= ap_const_logic_1;
        else 
            tmp1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_d0 <= reg_227;

    tmp1_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, tmp_1_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_1_reg_737 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            tmp1_we0 <= ap_const_logic_1;
        else 
            tmp1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_64_fu_428_p3 <= (trunc_ln33_fu_347_p1 & lshr_ln10_4_fu_418_p4);
    tmp_65_fu_442_p3 <= (lshr_ln10_4_fu_418_p4 & ap_const_lv6_0);
    tmp_66_fu_468_p3 <= (trunc_ln33_fu_347_p1 & or_ln35_fu_462_p2);
    tmp_67_fu_482_p3 <= (or_ln35_fu_462_p2 & ap_const_lv6_0);
    tmp_fu_319_p3 <= k_fu_70(6 downto 6);
    tmp_s_fu_391_p3 <= (trunc_ln33_fu_347_p1 & ap_const_lv6_0);
    trunc_ln33_fu_347_p1 <= select_ln32_fu_339_p3(6 - 1 downto 0);
    xor_ln10_1_fu_357_p2 <= (icmp_ln33_fu_291_p2 xor ap_const_lv1_1);
    xor_ln34_fu_327_p2 <= (tmp_fu_319_p3 xor ap_const_lv1_1);
    zext_ln35_1_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_450_p2),64));
    zext_ln35_2_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_468_p3),64));
    zext_ln35_3_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_490_p2),64));
    zext_ln35_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_428_p3),64));
end behav;
