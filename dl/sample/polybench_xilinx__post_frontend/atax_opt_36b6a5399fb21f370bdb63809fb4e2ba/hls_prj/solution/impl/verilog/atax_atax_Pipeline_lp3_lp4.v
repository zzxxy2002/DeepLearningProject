// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module atax_atax_Pipeline_lp3_lp4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp1_address0,
        tmp1_ce0,
        tmp1_q0,
        tmp1_1_address0,
        tmp1_1_ce0,
        tmp1_1_q0,
        buff_A_address0,
        buff_A_ce0,
        buff_A_q0,
        buff_A_1_address0,
        buff_A_1_ce0,
        buff_A_1_q0,
        buff_y_out_address0,
        buff_y_out_ce0,
        buff_y_out_we0,
        buff_y_out_d0,
        buff_y_out_address1,
        buff_y_out_ce1,
        buff_y_out_q1,
        buff_y_out_1_address0,
        buff_y_out_1_ce0,
        buff_y_out_1_we0,
        buff_y_out_1_d0,
        buff_y_out_1_address1,
        buff_y_out_1_ce1,
        buff_y_out_1_q1,
        grp_fu_1608_p_din0,
        grp_fu_1608_p_din1,
        grp_fu_1608_p_opcode,
        grp_fu_1608_p_dout0,
        grp_fu_1608_p_ce,
        grp_fu_1612_p_din0,
        grp_fu_1612_p_din1,
        grp_fu_1612_p_opcode,
        grp_fu_1612_p_dout0,
        grp_fu_1612_p_ce,
        grp_fu_1616_p_din0,
        grp_fu_1616_p_din1,
        grp_fu_1616_p_dout0,
        grp_fu_1616_p_ce,
        grp_fu_1620_p_din0,
        grp_fu_1620_p_din1,
        grp_fu_1620_p_dout0,
        grp_fu_1620_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] tmp1_address0;
output   tmp1_ce0;
input  [31:0] tmp1_q0;
output  [4:0] tmp1_1_address0;
output   tmp1_1_ce0;
input  [31:0] tmp1_1_q0;
output  [10:0] buff_A_address0;
output   buff_A_ce0;
input  [31:0] buff_A_q0;
output  [10:0] buff_A_1_address0;
output   buff_A_1_ce0;
input  [31:0] buff_A_1_q0;
output  [4:0] buff_y_out_address0;
output   buff_y_out_ce0;
output   buff_y_out_we0;
output  [31:0] buff_y_out_d0;
output  [4:0] buff_y_out_address1;
output   buff_y_out_ce1;
input  [31:0] buff_y_out_q1;
output  [4:0] buff_y_out_1_address0;
output   buff_y_out_1_ce0;
output   buff_y_out_1_we0;
output  [31:0] buff_y_out_1_d0;
output  [4:0] buff_y_out_1_address1;
output   buff_y_out_1_ce1;
input  [31:0] buff_y_out_1_q1;
output  [31:0] grp_fu_1608_p_din0;
output  [31:0] grp_fu_1608_p_din1;
output  [1:0] grp_fu_1608_p_opcode;
input  [31:0] grp_fu_1608_p_dout0;
output   grp_fu_1608_p_ce;
output  [31:0] grp_fu_1612_p_din0;
output  [31:0] grp_fu_1612_p_din1;
output  [1:0] grp_fu_1612_p_opcode;
input  [31:0] grp_fu_1612_p_dout0;
output   grp_fu_1612_p_ce;
output  [31:0] grp_fu_1616_p_din0;
output  [31:0] grp_fu_1616_p_din1;
input  [31:0] grp_fu_1616_p_dout0;
output   grp_fu_1616_p_ce;
output  [31:0] grp_fu_1620_p_din0;
output  [31:0] grp_fu_1620_p_din1;
input  [31:0] grp_fu_1620_p_dout0;
output   grp_fu_1620_p_ce;

reg ap_idle;
reg tmp1_ce0;
reg tmp1_1_ce0;
reg buff_A_ce0;
reg buff_A_1_ce0;
reg buff_y_out_ce0;
reg buff_y_out_we0;
reg buff_y_out_ce1;
reg buff_y_out_1_ce0;
reg buff_y_out_1_we0;
reg buff_y_out_1_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_186_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln26_1_fu_238_p1;
reg   [0:0] trunc_ln26_1_reg_340;
wire   [4:0] lshr_ln5_5_fu_258_p4;
reg   [4:0] lshr_ln5_5_reg_355;
reg   [4:0] lshr_ln5_5_reg_355_pp0_iter1_reg;
reg   [4:0] lshr_ln5_5_reg_355_pp0_iter2_reg;
wire   [31:0] tmp_1_fu_303_p3;
reg   [31:0] tmp_1_reg_370;
reg   [31:0] buff_A_load_reg_376;
reg   [31:0] buff_A_1_load_reg_381;
reg   [4:0] buff_y_out_addr_reg_386;
reg   [4:0] buff_y_out_addr_reg_386_pp0_iter4_reg;
reg   [4:0] buff_y_out_addr_reg_386_pp0_iter5_reg;
reg   [4:0] buff_y_out_addr_reg_386_pp0_iter6_reg;
reg   [4:0] buff_y_out_addr_reg_386_pp0_iter7_reg;
reg   [4:0] buff_y_out_addr_reg_386_pp0_iter8_reg;
reg   [4:0] buff_y_out_1_addr_reg_392;
reg   [4:0] buff_y_out_1_addr_reg_392_pp0_iter4_reg;
reg   [4:0] buff_y_out_1_addr_reg_392_pp0_iter5_reg;
reg   [4:0] buff_y_out_1_addr_reg_392_pp0_iter6_reg;
reg   [4:0] buff_y_out_1_addr_reg_392_pp0_iter7_reg;
reg   [4:0] buff_y_out_1_addr_reg_392_pp0_iter8_reg;
reg   [31:0] buff_y_out_load_reg_398;
reg   [31:0] mul1_reg_403;
reg   [31:0] mul57_1_reg_408;
reg   [31:0] buff_y_out_1_load_reg_413;
reg   [31:0] add1_reg_418;
reg   [31:0] add58_1_reg_423;
wire   [63:0] zext_ln5_fu_252_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_fu_276_p1;
wire   [63:0] zext_ln5_1_fu_310_p1;
reg   [6:0] j_1_fu_54;
wire   [6:0] add_ln27_fu_282_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_1_load;
reg   [6:0] i_fu_58;
wire   [6:0] select_ln26_fu_226_p3;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [11:0] indvar_flatten_fu_62;
wire   [11:0] add_ln26_1_fu_192_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] tmp_fu_210_p3;
wire   [6:0] add_ln26_fu_204_p2;
wire   [4:0] lshr_ln5_2_fu_242_p4;
wire   [6:0] select_ln5_fu_218_p3;
wire   [5:0] trunc_ln26_fu_234_p1;
wire   [10:0] tmp_s_fu_268_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 j_1_fu_54 = 7'd0;
#0 i_fu_58 = 7'd0;
#0 indvar_flatten_fu_62 = 12'd0;
#0 ap_done_reg = 1'b0;
end

atax_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_58 <= select_ln26_fu_226_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_62 <= add_ln26_1_fu_192_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_1_fu_54 <= add_ln27_fu_282_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_1_fu_54 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add1_reg_418 <= grp_fu_1608_p_dout0;
        add58_1_reg_423 <= grp_fu_1612_p_dout0;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        buff_y_out_1_addr_reg_392 <= zext_ln5_1_fu_310_p1;
        buff_y_out_1_addr_reg_392_pp0_iter4_reg <= buff_y_out_1_addr_reg_392;
        buff_y_out_1_addr_reg_392_pp0_iter5_reg <= buff_y_out_1_addr_reg_392_pp0_iter4_reg;
        buff_y_out_1_addr_reg_392_pp0_iter6_reg <= buff_y_out_1_addr_reg_392_pp0_iter5_reg;
        buff_y_out_1_addr_reg_392_pp0_iter7_reg <= buff_y_out_1_addr_reg_392_pp0_iter6_reg;
        buff_y_out_1_addr_reg_392_pp0_iter8_reg <= buff_y_out_1_addr_reg_392_pp0_iter7_reg;
        buff_y_out_addr_reg_386 <= zext_ln5_1_fu_310_p1;
        buff_y_out_addr_reg_386_pp0_iter4_reg <= buff_y_out_addr_reg_386;
        buff_y_out_addr_reg_386_pp0_iter5_reg <= buff_y_out_addr_reg_386_pp0_iter4_reg;
        buff_y_out_addr_reg_386_pp0_iter6_reg <= buff_y_out_addr_reg_386_pp0_iter5_reg;
        buff_y_out_addr_reg_386_pp0_iter7_reg <= buff_y_out_addr_reg_386_pp0_iter6_reg;
        buff_y_out_addr_reg_386_pp0_iter8_reg <= buff_y_out_addr_reg_386_pp0_iter7_reg;
        lshr_ln5_5_reg_355_pp0_iter2_reg <= lshr_ln5_5_reg_355_pp0_iter1_reg;
        mul1_reg_403 <= grp_fu_1616_p_dout0;
        mul57_1_reg_408 <= grp_fu_1620_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        buff_A_1_load_reg_381 <= buff_A_1_q0;
        buff_A_load_reg_376 <= buff_A_q0;
        lshr_ln5_5_reg_355 <= {{select_ln5_fu_218_p3[5:1]}};
        lshr_ln5_5_reg_355_pp0_iter1_reg <= lshr_ln5_5_reg_355;
        tmp_1_reg_370 <= tmp_1_fu_303_p3;
        trunc_ln26_1_reg_340 <= trunc_ln26_1_fu_238_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        buff_y_out_1_load_reg_413 <= buff_y_out_1_q1;
        buff_y_out_load_reg_398 <= buff_y_out_q1;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_186_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_1_load = j_1_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_A_1_ce0 = 1'b1;
    end else begin
        buff_A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_A_ce0 = 1'b1;
    end else begin
        buff_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_y_out_1_ce0 = 1'b1;
    end else begin
        buff_y_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buff_y_out_1_ce1 = 1'b1;
    end else begin
        buff_y_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_y_out_1_we0 = 1'b1;
    end else begin
        buff_y_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_y_out_ce0 = 1'b1;
    end else begin
        buff_y_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buff_y_out_ce1 = 1'b1;
    end else begin
        buff_y_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_y_out_we0 = 1'b1;
    end else begin
        buff_y_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp1_1_ce0 = 1'b1;
    end else begin
        tmp1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp1_ce0 = 1'b1;
    end else begin
        tmp1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_1_fu_192_p2 = (ap_sig_allocacmp_indvar_flatten_load + 12'd1);

assign add_ln26_fu_204_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln27_fu_282_p2 = (select_ln5_fu_218_p3 + 7'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buff_A_1_address0 = zext_ln28_fu_276_p1;

assign buff_A_address0 = zext_ln28_fu_276_p1;

assign buff_y_out_1_address0 = buff_y_out_1_addr_reg_392_pp0_iter8_reg;

assign buff_y_out_1_address1 = zext_ln5_1_fu_310_p1;

assign buff_y_out_1_d0 = add58_1_reg_423;

assign buff_y_out_address0 = buff_y_out_addr_reg_386_pp0_iter8_reg;

assign buff_y_out_address1 = zext_ln5_1_fu_310_p1;

assign buff_y_out_d0 = add1_reg_418;

assign grp_fu_1608_p_ce = 1'b1;

assign grp_fu_1608_p_din0 = buff_y_out_load_reg_398;

assign grp_fu_1608_p_din1 = mul1_reg_403;

assign grp_fu_1608_p_opcode = 2'd0;

assign grp_fu_1612_p_ce = 1'b1;

assign grp_fu_1612_p_din0 = buff_y_out_1_load_reg_413;

assign grp_fu_1612_p_din1 = mul57_1_reg_408;

assign grp_fu_1612_p_opcode = 2'd0;

assign grp_fu_1616_p_ce = 1'b1;

assign grp_fu_1616_p_din0 = buff_A_load_reg_376;

assign grp_fu_1616_p_din1 = tmp_1_reg_370;

assign grp_fu_1620_p_ce = 1'b1;

assign grp_fu_1620_p_din0 = buff_A_1_load_reg_381;

assign grp_fu_1620_p_din1 = tmp_1_reg_370;

assign icmp_ln26_fu_186_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 12'd2048) ? 1'b1 : 1'b0);

assign lshr_ln5_2_fu_242_p4 = {{select_ln26_fu_226_p3[5:1]}};

assign lshr_ln5_5_fu_258_p4 = {{select_ln5_fu_218_p3[5:1]}};

assign select_ln26_fu_226_p3 = ((tmp_fu_210_p3[0:0] == 1'b1) ? add_ln26_fu_204_p2 : ap_sig_allocacmp_i_load);

assign select_ln5_fu_218_p3 = ((tmp_fu_210_p3[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_1_load);

assign tmp1_1_address0 = zext_ln5_fu_252_p1;

assign tmp1_address0 = zext_ln5_fu_252_p1;

assign tmp_1_fu_303_p3 = ((trunc_ln26_1_reg_340[0:0] == 1'b1) ? tmp1_1_q0 : tmp1_q0);

assign tmp_fu_210_p3 = ap_sig_allocacmp_j_1_load[32'd6];

assign tmp_s_fu_268_p3 = {{trunc_ln26_fu_234_p1}, {lshr_ln5_5_fu_258_p4}};

assign trunc_ln26_1_fu_238_p1 = select_ln26_fu_226_p3[0:0];

assign trunc_ln26_fu_234_p1 = select_ln26_fu_226_p3[5:0];

assign zext_ln28_fu_276_p1 = tmp_s_fu_268_p3;

assign zext_ln5_1_fu_310_p1 = lshr_ln5_5_reg_355_pp0_iter2_reg;

assign zext_ln5_fu_252_p1 = lshr_ln5_2_fu_242_p4;

endmodule //atax_atax_Pipeline_lp3_lp4
