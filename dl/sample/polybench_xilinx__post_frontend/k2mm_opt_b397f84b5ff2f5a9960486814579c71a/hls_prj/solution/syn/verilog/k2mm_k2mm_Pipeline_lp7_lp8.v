// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module k2mm_k2mm_Pipeline_lp7_lp8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buff_D_address0,
        buff_D_ce0,
        buff_D_q0,
        buff_D_address1,
        buff_D_ce1,
        buff_D_q1,
        buff_D_1_address0,
        buff_D_1_ce0,
        buff_D_1_q0,
        buff_D_1_address1,
        buff_D_1_ce1,
        buff_D_1_q1,
        buff_E_out_address0,
        buff_E_out_ce0,
        buff_E_out_we0,
        buff_E_out_d0,
        buff_E_out_address1,
        buff_E_out_ce1,
        buff_E_out_we1,
        buff_E_out_d1,
        buff_E_out_1_address0,
        buff_E_out_1_ce0,
        buff_E_out_1_we0,
        buff_E_out_1_d0,
        buff_E_out_1_address1,
        buff_E_out_1_ce1,
        buff_E_out_1_we1,
        buff_E_out_1_d1,
        tmp2_address0,
        tmp2_ce0,
        tmp2_q0,
        tmp2_address1,
        tmp2_ce1,
        tmp2_q1,
        tmp2_1_address0,
        tmp2_1_ce0,
        tmp2_1_q0,
        tmp2_1_address1,
        tmp2_1_ce1,
        tmp2_1_q1,
        beta,
        grp_fu_2898_p_din0,
        grp_fu_2898_p_din1,
        grp_fu_2898_p_opcode,
        grp_fu_2898_p_dout0,
        grp_fu_2898_p_ce,
        grp_fu_2906_p_din0,
        grp_fu_2906_p_din1,
        grp_fu_2906_p_opcode,
        grp_fu_2906_p_dout0,
        grp_fu_2906_p_ce,
        grp_fu_2910_p_din0,
        grp_fu_2910_p_din1,
        grp_fu_2910_p_opcode,
        grp_fu_2910_p_dout0,
        grp_fu_2910_p_ce,
        grp_fu_2914_p_din0,
        grp_fu_2914_p_din1,
        grp_fu_2914_p_opcode,
        grp_fu_2914_p_dout0,
        grp_fu_2914_p_ce,
        grp_fu_2902_p_din0,
        grp_fu_2902_p_din1,
        grp_fu_2902_p_dout0,
        grp_fu_2902_p_ce,
        grp_fu_2918_p_din0,
        grp_fu_2918_p_din1,
        grp_fu_2918_p_dout0,
        grp_fu_2918_p_ce,
        grp_fu_2922_p_din0,
        grp_fu_2922_p_din1,
        grp_fu_2922_p_dout0,
        grp_fu_2922_p_ce,
        grp_fu_2926_p_din0,
        grp_fu_2926_p_din1,
        grp_fu_2926_p_dout0,
        grp_fu_2926_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] buff_D_address0;
output   buff_D_ce0;
input  [31:0] buff_D_q0;
output  [10:0] buff_D_address1;
output   buff_D_ce1;
input  [31:0] buff_D_q1;
output  [10:0] buff_D_1_address0;
output   buff_D_1_ce0;
input  [31:0] buff_D_1_q0;
output  [10:0] buff_D_1_address1;
output   buff_D_1_ce1;
input  [31:0] buff_D_1_q1;
output  [10:0] buff_E_out_address0;
output   buff_E_out_ce0;
output   buff_E_out_we0;
output  [31:0] buff_E_out_d0;
output  [10:0] buff_E_out_address1;
output   buff_E_out_ce1;
output   buff_E_out_we1;
output  [31:0] buff_E_out_d1;
output  [10:0] buff_E_out_1_address0;
output   buff_E_out_1_ce0;
output   buff_E_out_1_we0;
output  [31:0] buff_E_out_1_d0;
output  [10:0] buff_E_out_1_address1;
output   buff_E_out_1_ce1;
output   buff_E_out_1_we1;
output  [31:0] buff_E_out_1_d1;
output  [10:0] tmp2_address0;
output   tmp2_ce0;
input  [31:0] tmp2_q0;
output  [10:0] tmp2_address1;
output   tmp2_ce1;
input  [31:0] tmp2_q1;
output  [10:0] tmp2_1_address0;
output   tmp2_1_ce0;
input  [31:0] tmp2_1_q0;
output  [10:0] tmp2_1_address1;
output   tmp2_1_ce1;
input  [31:0] tmp2_1_q1;
input  [31:0] beta;
output  [31:0] grp_fu_2898_p_din0;
output  [31:0] grp_fu_2898_p_din1;
output  [1:0] grp_fu_2898_p_opcode;
input  [31:0] grp_fu_2898_p_dout0;
output   grp_fu_2898_p_ce;
output  [31:0] grp_fu_2906_p_din0;
output  [31:0] grp_fu_2906_p_din1;
output  [1:0] grp_fu_2906_p_opcode;
input  [31:0] grp_fu_2906_p_dout0;
output   grp_fu_2906_p_ce;
output  [31:0] grp_fu_2910_p_din0;
output  [31:0] grp_fu_2910_p_din1;
output  [1:0] grp_fu_2910_p_opcode;
input  [31:0] grp_fu_2910_p_dout0;
output   grp_fu_2910_p_ce;
output  [31:0] grp_fu_2914_p_din0;
output  [31:0] grp_fu_2914_p_din1;
output  [1:0] grp_fu_2914_p_opcode;
input  [31:0] grp_fu_2914_p_dout0;
output   grp_fu_2914_p_ce;
output  [31:0] grp_fu_2902_p_din0;
output  [31:0] grp_fu_2902_p_din1;
input  [31:0] grp_fu_2902_p_dout0;
output   grp_fu_2902_p_ce;
output  [31:0] grp_fu_2918_p_din0;
output  [31:0] grp_fu_2918_p_din1;
input  [31:0] grp_fu_2918_p_dout0;
output   grp_fu_2918_p_ce;
output  [31:0] grp_fu_2922_p_din0;
output  [31:0] grp_fu_2922_p_din1;
input  [31:0] grp_fu_2922_p_dout0;
output   grp_fu_2922_p_ce;
output  [31:0] grp_fu_2926_p_din0;
output  [31:0] grp_fu_2926_p_din1;
input  [31:0] grp_fu_2926_p_dout0;
output   grp_fu_2926_p_ce;

reg ap_idle;
reg buff_D_ce0;
reg buff_D_ce1;
reg buff_D_1_ce0;
reg buff_D_1_ce1;
reg buff_E_out_ce0;
reg buff_E_out_we0;
reg buff_E_out_ce1;
reg buff_E_out_we1;
reg buff_E_out_1_ce0;
reg buff_E_out_1_we0;
reg buff_E_out_1_ce1;
reg buff_E_out_1_we1;
reg tmp2_ce0;
reg tmp2_ce1;
reg tmp2_1_ce0;
reg tmp2_1_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_278_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln45_fu_348_p1;
reg   [63:0] zext_ln45_reg_428;
reg   [63:0] zext_ln45_reg_428_pp0_iter1_reg;
reg   [63:0] zext_ln45_reg_428_pp0_iter2_reg;
reg   [63:0] zext_ln45_reg_428_pp0_iter3_reg;
reg   [63:0] zext_ln45_reg_428_pp0_iter4_reg;
reg   [63:0] zext_ln45_reg_428_pp0_iter5_reg;
reg   [63:0] zext_ln45_reg_428_pp0_iter6_reg;
reg   [63:0] zext_ln45_reg_428_pp0_iter7_reg;
reg   [63:0] zext_ln45_reg_428_pp0_iter8_reg;
wire   [63:0] zext_ln45_1_fu_368_p1;
reg   [63:0] zext_ln45_1_reg_446;
reg   [63:0] zext_ln45_1_reg_446_pp0_iter1_reg;
reg   [63:0] zext_ln45_1_reg_446_pp0_iter2_reg;
reg   [63:0] zext_ln45_1_reg_446_pp0_iter3_reg;
reg   [63:0] zext_ln45_1_reg_446_pp0_iter4_reg;
reg   [63:0] zext_ln45_1_reg_446_pp0_iter5_reg;
reg   [63:0] zext_ln45_1_reg_446_pp0_iter6_reg;
reg   [63:0] zext_ln45_1_reg_446_pp0_iter7_reg;
reg   [63:0] zext_ln45_1_reg_446_pp0_iter8_reg;
reg   [31:0] buff_D_load_reg_464;
reg   [31:0] buff_D_1_load_reg_469;
reg   [31:0] buff_D_load_1_reg_474;
reg   [31:0] buff_D_1_load_1_reg_479;
reg   [31:0] mux_case_023_reg_504;
reg   [31:0] mul3_reg_509;
reg   [31:0] tmp2_1_load_reg_514;
reg   [31:0] mux_case_026_reg_519;
reg   [31:0] tmp2_1_load_1_reg_524;
reg   [31:0] mul126_1_reg_529;
reg   [31:0] mul126_2_reg_534;
reg   [31:0] mul126_3_reg_539;
reg   [31:0] add2_reg_544;
reg   [31:0] add127_1_reg_549;
reg   [31:0] add127_2_reg_554;
reg   [31:0] add127_3_reg_559;
wire    ap_block_pp0_stage0;
reg   [6:0] j_fu_60;
wire   [6:0] add_ln44_fu_374_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_64;
wire   [6:0] select_ln43_fu_318_p3;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten148_fu_68;
wire   [10:0] add_ln43_1_fu_284_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten148_load;
wire   [0:0] tmp_fu_302_p3;
wire   [6:0] add_ln43_fu_296_p2;
wire   [6:0] select_ln6_fu_310_p3;
wire   [5:0] trunc_ln13_fu_326_p1;
wire   [4:0] lshr_ln6_4_fu_330_p4;
wire   [10:0] tmp_s_fu_340_p3;
wire   [4:0] or_ln45_fu_354_p2;
wire   [10:0] tmp_1_fu_360_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 j_fu_60 = 7'd0;
#0 i_fu_64 = 7'd0;
#0 indvar_flatten148_fu_68 = 11'd0;
#0 ap_done_reg = 1'b0;
end

k2mm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_278_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_64 <= select_ln43_fu_318_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_278_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten148_fu_68 <= add_ln43_1_fu_284_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten148_fu_68 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_278_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_60 <= add_ln44_fu_374_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_60 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add127_1_reg_549 <= grp_fu_2906_p_dout0;
        add127_2_reg_554 <= grp_fu_2910_p_dout0;
        add127_3_reg_559 <= grp_fu_2914_p_dout0;
        add2_reg_544 <= grp_fu_2898_p_dout0;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        mul126_1_reg_529 <= grp_fu_2918_p_dout0;
        mul126_2_reg_534 <= grp_fu_2922_p_dout0;
        mul126_3_reg_539 <= grp_fu_2926_p_dout0;
        mul3_reg_509 <= grp_fu_2902_p_dout0;
        zext_ln45_1_reg_446_pp0_iter2_reg[10 : 1] <= zext_ln45_1_reg_446_pp0_iter1_reg[10 : 1];
        zext_ln45_1_reg_446_pp0_iter3_reg[10 : 1] <= zext_ln45_1_reg_446_pp0_iter2_reg[10 : 1];
        zext_ln45_1_reg_446_pp0_iter4_reg[10 : 1] <= zext_ln45_1_reg_446_pp0_iter3_reg[10 : 1];
        zext_ln45_1_reg_446_pp0_iter5_reg[10 : 1] <= zext_ln45_1_reg_446_pp0_iter4_reg[10 : 1];
        zext_ln45_1_reg_446_pp0_iter6_reg[10 : 1] <= zext_ln45_1_reg_446_pp0_iter5_reg[10 : 1];
        zext_ln45_1_reg_446_pp0_iter7_reg[10 : 1] <= zext_ln45_1_reg_446_pp0_iter6_reg[10 : 1];
        zext_ln45_1_reg_446_pp0_iter8_reg[10 : 1] <= zext_ln45_1_reg_446_pp0_iter7_reg[10 : 1];
        zext_ln45_reg_428_pp0_iter2_reg[10 : 0] <= zext_ln45_reg_428_pp0_iter1_reg[10 : 0];
        zext_ln45_reg_428_pp0_iter3_reg[10 : 0] <= zext_ln45_reg_428_pp0_iter2_reg[10 : 0];
        zext_ln45_reg_428_pp0_iter4_reg[10 : 0] <= zext_ln45_reg_428_pp0_iter3_reg[10 : 0];
        zext_ln45_reg_428_pp0_iter5_reg[10 : 0] <= zext_ln45_reg_428_pp0_iter4_reg[10 : 0];
        zext_ln45_reg_428_pp0_iter6_reg[10 : 0] <= zext_ln45_reg_428_pp0_iter5_reg[10 : 0];
        zext_ln45_reg_428_pp0_iter7_reg[10 : 0] <= zext_ln45_reg_428_pp0_iter6_reg[10 : 0];
        zext_ln45_reg_428_pp0_iter8_reg[10 : 0] <= zext_ln45_reg_428_pp0_iter7_reg[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        zext_ln45_1_reg_446[10 : 1] <= zext_ln45_1_fu_368_p1[10 : 1];
        zext_ln45_1_reg_446_pp0_iter1_reg[10 : 1] <= zext_ln45_1_reg_446[10 : 1];
        zext_ln45_reg_428[10 : 0] <= zext_ln45_fu_348_p1[10 : 0];
        zext_ln45_reg_428_pp0_iter1_reg[10 : 0] <= zext_ln45_reg_428[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_D_1_load_1_reg_479 <= buff_D_1_q0;
        buff_D_1_load_reg_469 <= buff_D_1_q1;
        buff_D_load_1_reg_474 <= buff_D_q0;
        buff_D_load_reg_464 <= buff_D_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        mux_case_023_reg_504 <= tmp2_q1;
        mux_case_026_reg_519 <= tmp2_q0;
        tmp2_1_load_1_reg_524 <= tmp2_1_q0;
        tmp2_1_load_reg_514 <= tmp2_1_q1;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_278_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten148_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten148_load = indvar_flatten148_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_D_1_ce0 = 1'b1;
    end else begin
        buff_D_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_D_1_ce1 = 1'b1;
    end else begin
        buff_D_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_D_ce0 = 1'b1;
    end else begin
        buff_D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_D_ce1 = 1'b1;
    end else begin
        buff_D_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_E_out_1_ce0 = 1'b1;
    end else begin
        buff_E_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_E_out_1_ce1 = 1'b1;
    end else begin
        buff_E_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_E_out_1_we0 = 1'b1;
    end else begin
        buff_E_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_E_out_1_we1 = 1'b1;
    end else begin
        buff_E_out_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_E_out_ce0 = 1'b1;
    end else begin
        buff_E_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_E_out_ce1 = 1'b1;
    end else begin
        buff_E_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_E_out_we0 = 1'b1;
    end else begin
        buff_E_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        buff_E_out_we1 = 1'b1;
    end else begin
        buff_E_out_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tmp2_1_ce0 = 1'b1;
    end else begin
        tmp2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tmp2_1_ce1 = 1'b1;
    end else begin
        tmp2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tmp2_ce0 = 1'b1;
    end else begin
        tmp2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tmp2_ce1 = 1'b1;
    end else begin
        tmp2_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_1_fu_284_p2 = (ap_sig_allocacmp_indvar_flatten148_load + 11'd1);

assign add_ln43_fu_296_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln44_fu_374_p2 = (select_ln6_fu_310_p3 + 7'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buff_D_1_address0 = zext_ln45_1_fu_368_p1;

assign buff_D_1_address1 = zext_ln45_fu_348_p1;

assign buff_D_address0 = zext_ln45_1_fu_368_p1;

assign buff_D_address1 = zext_ln45_fu_348_p1;

assign buff_E_out_1_address0 = zext_ln45_1_reg_446_pp0_iter8_reg;

assign buff_E_out_1_address1 = zext_ln45_reg_428_pp0_iter8_reg;

assign buff_E_out_1_d0 = add127_3_reg_559;

assign buff_E_out_1_d1 = add127_1_reg_549;

assign buff_E_out_address0 = zext_ln45_1_reg_446_pp0_iter8_reg;

assign buff_E_out_address1 = zext_ln45_reg_428_pp0_iter8_reg;

assign buff_E_out_d0 = add127_2_reg_554;

assign buff_E_out_d1 = add2_reg_544;

assign grp_fu_2898_p_ce = 1'b1;

assign grp_fu_2898_p_din0 = mux_case_023_reg_504;

assign grp_fu_2898_p_din1 = mul3_reg_509;

assign grp_fu_2898_p_opcode = 2'd0;

assign grp_fu_2902_p_ce = 1'b1;

assign grp_fu_2902_p_din0 = buff_D_load_reg_464;

assign grp_fu_2902_p_din1 = beta;

assign grp_fu_2906_p_ce = 1'b1;

assign grp_fu_2906_p_din0 = tmp2_1_load_reg_514;

assign grp_fu_2906_p_din1 = mul126_1_reg_529;

assign grp_fu_2906_p_opcode = 2'd0;

assign grp_fu_2910_p_ce = 1'b1;

assign grp_fu_2910_p_din0 = mux_case_026_reg_519;

assign grp_fu_2910_p_din1 = mul126_2_reg_534;

assign grp_fu_2910_p_opcode = 2'd0;

assign grp_fu_2914_p_ce = 1'b1;

assign grp_fu_2914_p_din0 = tmp2_1_load_1_reg_524;

assign grp_fu_2914_p_din1 = mul126_3_reg_539;

assign grp_fu_2914_p_opcode = 2'd0;

assign grp_fu_2918_p_ce = 1'b1;

assign grp_fu_2918_p_din0 = buff_D_1_load_reg_469;

assign grp_fu_2918_p_din1 = beta;

assign grp_fu_2922_p_ce = 1'b1;

assign grp_fu_2922_p_din0 = buff_D_load_1_reg_474;

assign grp_fu_2922_p_din1 = beta;

assign grp_fu_2926_p_ce = 1'b1;

assign grp_fu_2926_p_din0 = buff_D_1_load_1_reg_479;

assign grp_fu_2926_p_din1 = beta;

assign icmp_ln43_fu_278_p2 = ((ap_sig_allocacmp_indvar_flatten148_load == 11'd1024) ? 1'b1 : 1'b0);

assign lshr_ln6_4_fu_330_p4 = {{select_ln6_fu_310_p3[5:1]}};

assign or_ln45_fu_354_p2 = (lshr_ln6_4_fu_330_p4 | 5'd1);

assign select_ln43_fu_318_p3 = ((tmp_fu_302_p3[0:0] == 1'b1) ? add_ln43_fu_296_p2 : ap_sig_allocacmp_i_load);

assign select_ln6_fu_310_p3 = ((tmp_fu_302_p3[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_load);

assign tmp2_1_address0 = zext_ln45_1_reg_446_pp0_iter2_reg;

assign tmp2_1_address1 = zext_ln45_reg_428_pp0_iter2_reg;

assign tmp2_address0 = zext_ln45_1_reg_446_pp0_iter2_reg;

assign tmp2_address1 = zext_ln45_reg_428_pp0_iter2_reg;

assign tmp_1_fu_360_p3 = {{trunc_ln13_fu_326_p1}, {or_ln45_fu_354_p2}};

assign tmp_fu_302_p3 = ap_sig_allocacmp_j_load[32'd6];

assign tmp_s_fu_340_p3 = {{trunc_ln13_fu_326_p1}, {lshr_ln6_4_fu_330_p4}};

assign trunc_ln13_fu_326_p1 = select_ln43_fu_318_p3[5:0];

assign zext_ln45_1_fu_368_p1 = tmp_1_fu_360_p3;

assign zext_ln45_fu_348_p1 = tmp_s_fu_340_p3;

always @ (posedge ap_clk) begin
    zext_ln45_reg_428[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_428_pp0_iter1_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_428_pp0_iter2_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_428_pp0_iter3_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_428_pp0_iter4_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_428_pp0_iter5_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_428_pp0_iter6_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_428_pp0_iter7_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_428_pp0_iter8_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_1_reg_446[0] <= 1'b1;
    zext_ln45_1_reg_446[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_1_reg_446_pp0_iter1_reg[0] <= 1'b1;
    zext_ln45_1_reg_446_pp0_iter1_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_1_reg_446_pp0_iter2_reg[0] <= 1'b1;
    zext_ln45_1_reg_446_pp0_iter2_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_1_reg_446_pp0_iter3_reg[0] <= 1'b1;
    zext_ln45_1_reg_446_pp0_iter3_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_1_reg_446_pp0_iter4_reg[0] <= 1'b1;
    zext_ln45_1_reg_446_pp0_iter4_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_1_reg_446_pp0_iter5_reg[0] <= 1'b1;
    zext_ln45_1_reg_446_pp0_iter5_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_1_reg_446_pp0_iter6_reg[0] <= 1'b1;
    zext_ln45_1_reg_446_pp0_iter6_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_1_reg_446_pp0_iter7_reg[0] <= 1'b1;
    zext_ln45_1_reg_446_pp0_iter7_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln45_1_reg_446_pp0_iter8_reg[0] <= 1'b1;
    zext_ln45_1_reg_446_pp0_iter8_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //k2mm_k2mm_Pipeline_lp7_lp8
