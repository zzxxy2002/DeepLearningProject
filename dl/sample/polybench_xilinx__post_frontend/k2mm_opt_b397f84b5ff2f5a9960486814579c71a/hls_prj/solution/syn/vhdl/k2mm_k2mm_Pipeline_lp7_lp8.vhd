-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2mm_k2mm_Pipeline_lp7_lp8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buff_D_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_D_ce0 : OUT STD_LOGIC;
    buff_D_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_D_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_D_ce1 : OUT STD_LOGIC;
    buff_D_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_D_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_D_1_ce0 : OUT STD_LOGIC;
    buff_D_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_D_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_D_1_ce1 : OUT STD_LOGIC;
    buff_D_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    buff_E_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_E_out_ce0 : OUT STD_LOGIC;
    buff_E_out_we0 : OUT STD_LOGIC;
    buff_E_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buff_E_out_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_E_out_ce1 : OUT STD_LOGIC;
    buff_E_out_we1 : OUT STD_LOGIC;
    buff_E_out_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buff_E_out_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_E_out_1_ce0 : OUT STD_LOGIC;
    buff_E_out_1_we0 : OUT STD_LOGIC;
    buff_E_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buff_E_out_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buff_E_out_1_ce1 : OUT STD_LOGIC;
    buff_E_out_1_we1 : OUT STD_LOGIC;
    buff_E_out_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    tmp2_ce0 : OUT STD_LOGIC;
    tmp2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp2_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    tmp2_ce1 : OUT STD_LOGIC;
    tmp2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp2_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    tmp2_1_ce0 : OUT STD_LOGIC;
    tmp2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp2_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    tmp2_1_ce1 : OUT STD_LOGIC;
    tmp2_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    beta : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2898_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2898_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2898_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_2898_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2898_p_ce : OUT STD_LOGIC;
    grp_fu_2906_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2906_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2906_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_2906_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2906_p_ce : OUT STD_LOGIC;
    grp_fu_2910_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2910_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2910_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_2910_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2910_p_ce : OUT STD_LOGIC;
    grp_fu_2914_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2914_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2914_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_2914_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2914_p_ce : OUT STD_LOGIC;
    grp_fu_2902_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2902_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2902_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2902_p_ce : OUT STD_LOGIC;
    grp_fu_2918_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2918_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2918_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2918_p_ce : OUT STD_LOGIC;
    grp_fu_2922_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2922_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2922_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2922_p_ce : OUT STD_LOGIC;
    grp_fu_2926_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2926_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2926_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2926_p_ce : OUT STD_LOGIC );
end;


architecture behav of k2mm_k2mm_Pipeline_lp7_lp8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln43_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln45_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_428 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_428_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_428_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_428_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_428_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_428_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_428_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_428_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_428_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_reg_446 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_reg_446_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_reg_446_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_reg_446_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_reg_446_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_reg_446_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_reg_446_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_reg_446_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_reg_446_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal buff_D_load_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_D_1_load_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_D_load_1_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_D_1_load_1_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_023_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_1_load_reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_026_reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_1_load_1_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul126_1_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul126_2_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul126_3_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal add127_1_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal add127_2_reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal add127_3_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_60 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln44_fu_374_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal select_ln43_fu_318_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten148_fu_68 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln43_1_fu_284_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten148_load : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_302_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln43_fu_296_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln6_fu_310_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln13_fu_326_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln6_4_fu_330_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_340_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln45_fu_354_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_360_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component k2mm_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2mm_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component k2mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln43_fu_278_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_64 <= select_ln43_fu_318_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten148_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln43_fu_278_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten148_fu_68 <= add_ln43_1_fu_284_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten148_fu_68 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln43_fu_278_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_60 <= add_ln44_fu_374_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_60 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add127_1_reg_549 <= grp_fu_2906_p_dout0;
                add127_2_reg_554 <= grp_fu_2910_p_dout0;
                add127_3_reg_559 <= grp_fu_2914_p_dout0;
                add2_reg_544 <= grp_fu_2898_p_dout0;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                mul126_1_reg_529 <= grp_fu_2918_p_dout0;
                mul126_2_reg_534 <= grp_fu_2922_p_dout0;
                mul126_3_reg_539 <= grp_fu_2926_p_dout0;
                mul3_reg_509 <= grp_fu_2902_p_dout0;
                    zext_ln45_1_reg_446_pp0_iter2_reg(10 downto 1) <= zext_ln45_1_reg_446_pp0_iter1_reg(10 downto 1);
                    zext_ln45_1_reg_446_pp0_iter3_reg(10 downto 1) <= zext_ln45_1_reg_446_pp0_iter2_reg(10 downto 1);
                    zext_ln45_1_reg_446_pp0_iter4_reg(10 downto 1) <= zext_ln45_1_reg_446_pp0_iter3_reg(10 downto 1);
                    zext_ln45_1_reg_446_pp0_iter5_reg(10 downto 1) <= zext_ln45_1_reg_446_pp0_iter4_reg(10 downto 1);
                    zext_ln45_1_reg_446_pp0_iter6_reg(10 downto 1) <= zext_ln45_1_reg_446_pp0_iter5_reg(10 downto 1);
                    zext_ln45_1_reg_446_pp0_iter7_reg(10 downto 1) <= zext_ln45_1_reg_446_pp0_iter6_reg(10 downto 1);
                    zext_ln45_1_reg_446_pp0_iter8_reg(10 downto 1) <= zext_ln45_1_reg_446_pp0_iter7_reg(10 downto 1);
                    zext_ln45_reg_428_pp0_iter2_reg(10 downto 0) <= zext_ln45_reg_428_pp0_iter1_reg(10 downto 0);
                    zext_ln45_reg_428_pp0_iter3_reg(10 downto 0) <= zext_ln45_reg_428_pp0_iter2_reg(10 downto 0);
                    zext_ln45_reg_428_pp0_iter4_reg(10 downto 0) <= zext_ln45_reg_428_pp0_iter3_reg(10 downto 0);
                    zext_ln45_reg_428_pp0_iter5_reg(10 downto 0) <= zext_ln45_reg_428_pp0_iter4_reg(10 downto 0);
                    zext_ln45_reg_428_pp0_iter6_reg(10 downto 0) <= zext_ln45_reg_428_pp0_iter5_reg(10 downto 0);
                    zext_ln45_reg_428_pp0_iter7_reg(10 downto 0) <= zext_ln45_reg_428_pp0_iter6_reg(10 downto 0);
                    zext_ln45_reg_428_pp0_iter8_reg(10 downto 0) <= zext_ln45_reg_428_pp0_iter7_reg(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    zext_ln45_1_reg_446(10 downto 1) <= zext_ln45_1_fu_368_p1(10 downto 1);
                    zext_ln45_1_reg_446_pp0_iter1_reg(10 downto 1) <= zext_ln45_1_reg_446(10 downto 1);
                    zext_ln45_reg_428(10 downto 0) <= zext_ln45_fu_348_p1(10 downto 0);
                    zext_ln45_reg_428_pp0_iter1_reg(10 downto 0) <= zext_ln45_reg_428(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                buff_D_1_load_1_reg_479 <= buff_D_1_q0;
                buff_D_1_load_reg_469 <= buff_D_1_q1;
                buff_D_load_1_reg_474 <= buff_D_q0;
                buff_D_load_reg_464 <= buff_D_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                mux_case_023_reg_504 <= tmp2_q1;
                mux_case_026_reg_519 <= tmp2_q0;
                tmp2_1_load_1_reg_524 <= tmp2_1_q0;
                tmp2_1_load_reg_514 <= tmp2_1_q1;
            end if;
        end if;
    end process;
    zext_ln45_reg_428(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_428_pp0_iter1_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_428_pp0_iter2_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_428_pp0_iter3_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_428_pp0_iter4_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_428_pp0_iter5_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_428_pp0_iter6_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_428_pp0_iter7_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_428_pp0_iter8_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_1_reg_446(0) <= '1';
    zext_ln45_1_reg_446(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_1_reg_446_pp0_iter1_reg(0) <= '1';
    zext_ln45_1_reg_446_pp0_iter1_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_1_reg_446_pp0_iter2_reg(0) <= '1';
    zext_ln45_1_reg_446_pp0_iter2_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_1_reg_446_pp0_iter3_reg(0) <= '1';
    zext_ln45_1_reg_446_pp0_iter3_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_1_reg_446_pp0_iter4_reg(0) <= '1';
    zext_ln45_1_reg_446_pp0_iter4_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_1_reg_446_pp0_iter5_reg(0) <= '1';
    zext_ln45_1_reg_446_pp0_iter5_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_1_reg_446_pp0_iter6_reg(0) <= '1';
    zext_ln45_1_reg_446_pp0_iter6_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_1_reg_446_pp0_iter7_reg(0) <= '1';
    zext_ln45_1_reg_446_pp0_iter7_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln45_1_reg_446_pp0_iter8_reg(0) <= '1';
    zext_ln45_1_reg_446_pp0_iter8_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln43_1_fu_284_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten148_load) + unsigned(ap_const_lv11_1));
    add_ln43_fu_296_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv7_1));
    add_ln44_fu_374_p2 <= std_logic_vector(unsigned(select_ln6_fu_310_p3) + unsigned(ap_const_lv7_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln43_fu_278_p2)
    begin
        if (((icmp_ln43_fu_278_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_64)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten148_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten148_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten148_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten148_load <= indvar_flatten148_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_60, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_60;
        end if; 
    end process;

    buff_D_1_address0 <= zext_ln45_1_fu_368_p1(11 - 1 downto 0);
    buff_D_1_address1 <= zext_ln45_fu_348_p1(11 - 1 downto 0);

    buff_D_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buff_D_1_ce0 <= ap_const_logic_1;
        else 
            buff_D_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_D_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buff_D_1_ce1 <= ap_const_logic_1;
        else 
            buff_D_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_D_address0 <= zext_ln45_1_fu_368_p1(11 - 1 downto 0);
    buff_D_address1 <= zext_ln45_fu_348_p1(11 - 1 downto 0);

    buff_D_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buff_D_ce0 <= ap_const_logic_1;
        else 
            buff_D_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_D_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buff_D_ce1 <= ap_const_logic_1;
        else 
            buff_D_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_E_out_1_address0 <= zext_ln45_1_reg_446_pp0_iter8_reg(11 - 1 downto 0);
    buff_E_out_1_address1 <= zext_ln45_reg_428_pp0_iter8_reg(11 - 1 downto 0);

    buff_E_out_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            buff_E_out_1_ce0 <= ap_const_logic_1;
        else 
            buff_E_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_E_out_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            buff_E_out_1_ce1 <= ap_const_logic_1;
        else 
            buff_E_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_E_out_1_d0 <= add127_3_reg_559;
    buff_E_out_1_d1 <= add127_1_reg_549;

    buff_E_out_1_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            buff_E_out_1_we0 <= ap_const_logic_1;
        else 
            buff_E_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_E_out_1_we1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            buff_E_out_1_we1 <= ap_const_logic_1;
        else 
            buff_E_out_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_E_out_address0 <= zext_ln45_1_reg_446_pp0_iter8_reg(11 - 1 downto 0);
    buff_E_out_address1 <= zext_ln45_reg_428_pp0_iter8_reg(11 - 1 downto 0);

    buff_E_out_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            buff_E_out_ce0 <= ap_const_logic_1;
        else 
            buff_E_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_E_out_ce1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            buff_E_out_ce1 <= ap_const_logic_1;
        else 
            buff_E_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_E_out_d0 <= add127_2_reg_554;
    buff_E_out_d1 <= add2_reg_544;

    buff_E_out_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            buff_E_out_we0 <= ap_const_logic_1;
        else 
            buff_E_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_E_out_we1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            buff_E_out_we1 <= ap_const_logic_1;
        else 
            buff_E_out_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2898_p_ce <= ap_const_logic_1;
    grp_fu_2898_p_din0 <= mux_case_023_reg_504;
    grp_fu_2898_p_din1 <= mul3_reg_509;
    grp_fu_2898_p_opcode <= ap_const_lv2_0;
    grp_fu_2902_p_ce <= ap_const_logic_1;
    grp_fu_2902_p_din0 <= buff_D_load_reg_464;
    grp_fu_2902_p_din1 <= beta;
    grp_fu_2906_p_ce <= ap_const_logic_1;
    grp_fu_2906_p_din0 <= tmp2_1_load_reg_514;
    grp_fu_2906_p_din1 <= mul126_1_reg_529;
    grp_fu_2906_p_opcode <= ap_const_lv2_0;
    grp_fu_2910_p_ce <= ap_const_logic_1;
    grp_fu_2910_p_din0 <= mux_case_026_reg_519;
    grp_fu_2910_p_din1 <= mul126_2_reg_534;
    grp_fu_2910_p_opcode <= ap_const_lv2_0;
    grp_fu_2914_p_ce <= ap_const_logic_1;
    grp_fu_2914_p_din0 <= tmp2_1_load_1_reg_524;
    grp_fu_2914_p_din1 <= mul126_3_reg_539;
    grp_fu_2914_p_opcode <= ap_const_lv2_0;
    grp_fu_2918_p_ce <= ap_const_logic_1;
    grp_fu_2918_p_din0 <= buff_D_1_load_reg_469;
    grp_fu_2918_p_din1 <= beta;
    grp_fu_2922_p_ce <= ap_const_logic_1;
    grp_fu_2922_p_din0 <= buff_D_load_1_reg_474;
    grp_fu_2922_p_din1 <= beta;
    grp_fu_2926_p_ce <= ap_const_logic_1;
    grp_fu_2926_p_din0 <= buff_D_1_load_1_reg_479;
    grp_fu_2926_p_din1 <= beta;
    icmp_ln43_fu_278_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten148_load = ap_const_lv11_400) else "0";
    lshr_ln6_4_fu_330_p4 <= select_ln6_fu_310_p3(5 downto 1);
    or_ln45_fu_354_p2 <= (lshr_ln6_4_fu_330_p4 or ap_const_lv5_1);
    select_ln43_fu_318_p3 <= 
        add_ln43_fu_296_p2 when (tmp_fu_302_p3(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln6_fu_310_p3 <= 
        ap_const_lv7_0 when (tmp_fu_302_p3(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp2_1_address0 <= zext_ln45_1_reg_446_pp0_iter2_reg(11 - 1 downto 0);
    tmp2_1_address1 <= zext_ln45_reg_428_pp0_iter2_reg(11 - 1 downto 0);

    tmp2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            tmp2_1_ce0 <= ap_const_logic_1;
        else 
            tmp2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp2_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            tmp2_1_ce1 <= ap_const_logic_1;
        else 
            tmp2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_address0 <= zext_ln45_1_reg_446_pp0_iter2_reg(11 - 1 downto 0);
    tmp2_address1 <= zext_ln45_reg_428_pp0_iter2_reg(11 - 1 downto 0);

    tmp2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            tmp2_ce0 <= ap_const_logic_1;
        else 
            tmp2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp2_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            tmp2_ce1 <= ap_const_logic_1;
        else 
            tmp2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_360_p3 <= (trunc_ln13_fu_326_p1 & or_ln45_fu_354_p2);
    tmp_fu_302_p3 <= ap_sig_allocacmp_j_load(6 downto 6);
    tmp_s_fu_340_p3 <= (trunc_ln13_fu_326_p1 & lshr_ln6_4_fu_330_p4);
    trunc_ln13_fu_326_p1 <= select_ln43_fu_318_p3(6 - 1 downto 0);
    zext_ln45_1_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_360_p3),64));
    zext_ln45_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_340_p3),64));
end behav;
